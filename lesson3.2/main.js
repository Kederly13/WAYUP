/* 
    TASK 1

    Дан код:

    console.log('1');  -     сработает сразу как синхорнная функция и первая в стэке.
    setTimeout(function() {
    console.log('2')    -    несмотря на задержку, функция выбьется из стэка, попадет в ивент луп
                             и сработает после завершение всех синхронных функций.
    }, 0);
    Promise.resolve().then( () => console.log('3') ); - тоже выйдет из стэка и попадет в ивент луп но
                                                        как будет имеет приоритет над setTimeout потому что
                                                        является так званой микрозадачей (microtask)
                                                        которые выполняются первыми в event loop очереди.
     console.log('4');       выполнится второй, потому что, как и первая, является синхронной задачей.

    Два вопроса:
    1. В каком порядке выведутся цифры ? 1, 4, 3, 2
    2. Почему они выведутся именно так

    ps: Дать на второй вопрос развернутый ответ с комментарием для каждой операции.

    ПОРЯДОК: 1, 4, 3, 2
    
    

*/
console.log('hellodasdasd');



/*
    TASK 2

    Функция из браузерного API, setTimeout работает с помощью callback functions.
    Необходимо переписать ее, используя promises.
    
    function delay(ms) {
        (код, который написан вами)
    }

    function delay() должна возвращать promise,
    который перейдёт в состояние «выполнен» через ms миллисекунд.

    Example:

    delay(2000).then(() => console.log('выполнилось через 2 секунды'));

*/

function delay(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve()
        }, ms)
    })
}

delay(5000).then(() => console.log("HAHAHA"))

/* 
    TASK 3

    Дан код: 

    Promise
    .resolve()
    .then(() => console.log(1))
    .then(() => {
        setTimeout(() => {
            console.log(2)
        }, 0)
    })
    .then(() => console.log(3));

    Что выведет консоль ? 1, 3, 2. Потому что setTimiout, как я понимаю, пойдет в конец event loop за промисами

    ps: Мы прекрасно понимаем что подобную задачу можно просто прогнать через код,
    и узнать результат, но не обманывайте сами себя. 
    Представьте что вы на собеседовании и вам дали такую задачу,
    и под рукой нет компьютера. Просто проанализируйте код и напишите вариант ответа
*/

/* 

    TASK 4
    
    Дан код:


    console.log(1);

    setTimeout(() => {
        console.log(2);
    }, 0);

    console.log(3);

    Promise.resolve().then(() => {
        console.log(4);
    })

    console.log(5);

    while('') {
        console.log(6);
    }

    console.log(7);
 
    Что выведет консоль ?  1, 3, 5, 6, 7, 4, 2

    ps: Мы прекрасно понимаем что подобную задачу можно просто прогнать через код,
    и узнать результат, но не обманывайте сами себя. 
    Представьте что вы на собеседовании и вам дали такую задачу,
    и под рукой нет компьютера. Просто проанализируйте код и напишите вариант ответа
*/

/* 
    TASK 5
    
    Дан код:

    Promise
    .resolve()
    .then(() => console.log(1))
    .then(() => console.log(2))
    .then(() => console.log(3));

    Promise
    .resolve()
    .then(() => console.log(4))
    .then(() => console.log(5))
    .then(() => console.log(6));

    Что выведет консоль ? 1,2,3,4,5,6

ps: Мы прекрасно понимаем что подобную задачу можно просто прогнать через код,
    и узнать результат, но не обманывайте сами себя. 
    Представьте что вы на собеседовании и вам дали такую задачу,
    и под рукой нет компьютера. Просто проанализируйте код и напишите вариант ответа
    */




